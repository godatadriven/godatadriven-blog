#!/usr/bin/env python

__author__ = 'asnare'

import os.path, itertools
import botocore.session
import uuid

class Invalidation(object):
    __slots__ = ("_client", "distributionId", "id")
    def __init__(self, client, distributionId, id):
        self._client = client
        self.distributionId = distributionId
        self.id = id

    def __str__(self):
        return self.id

    def wait(self):
        waiter = self._client.get_waiter("invalidation_completed")
        waiter.wait(DistributionId=self.distributionId, Id=self.id)

class CloudFront(object):
    __slots__ = ("_client",)
    def __init__(self):
        session = botocore.session.get_session()
        self._client = session.create_client('cloudfront')

    def distributionIds(self):
        """
        Fetch the set of CloudFront distribution identifiers.

        :return: a set containing known distribution identifiers.
        """
        response = self._client.list_distributions()
        return {distribution['Id'] for distribution in response['DistributionList']['Items']}

    def invalidate(self, distributionId, objects):
        objects = list(objects)
        response = self._client.create_invalidation(DistributionId=distributionId,
                                                    InvalidationBatch=
            {
                "Paths": {
                    "Items": objects,
                    "Quantity": len(objects)
                },
                "CallerReference": str(uuid.uuid4())
            })
        return Invalidation(self._client,distributionId, response['Invalidation']['Id'])

def filetree(path):
    """
    Retrieve the set of files at a path. Directories are not included.
    :param path: the path to search for files.
    :return:     a generator that enumerates the relative names of files
                 at the given location.
    """
    if path[-1] != os.path.sep:
        path += os.path.sep

    def isHidden(file):
        return file.startswith('.')

    for dirpath, dirs, filenames in os.walk(path, topdown=True):
        for dir in set(dirs):
            if isHidden(dir): dirs.remove(dir)
        if filenames:
            dirpath = dirpath[len(path):]
            for filename in (f for f in filenames if not isHidden(f)):
                if not filename.startswith('.'):
                    yield os.path.join(dirpath, filename)

def main(location=os.path.curdir, distributionId=None):
    cf = CloudFront()
    distributionIds = cf.distributionIds()
    if distributionId is None:
        if len(distributionIds) == 1:
            distributionId = iter(distributionIds).next()
        else:
            print "Multiple distributions found. Please specify which one:", ", ".join(distributionIds)
            return
    elif distributionId not in distributionIds:
        print "Unknown distribution identifier:", distributionId
        print "Known distribution identifiers:", ", ".join(distributionIds)
        return

    print "Invalidating distribution:", distributionId
    objects = itertools.chain(["/"], ("/" + path for path in filetree(location)))
    invalidation = cf.invalidate(distributionId, objects)
    print "Waiting for invalidation %s to complete. (This can take quite some time.)" % invalidation.id
    invalidation.wait()

if __name__ == '__main__':
    import sys
    main(*sys.argv[1:])

# End.
