#!/usr/bin/env python

__author__ = 'asnare'

import os.path, itertools
import botocore.session
import uuid

class Invalidation(object):
    __slots__ = ("_client", "distributionId", "id")
    def __init__(self, client, distributionId, id):
        self._client = client
        self.distributionId = distributionId
        self.id = id

    def __str__(self):
        return self.id

    def wait(self):
        waiter = self._client.get_waiter("invalidation_completed")
        waiter.wait(DistributionId=self.distributionId, Id=self.id)

class CloudFront(object):
    __slots__ = ("_client",)
    def __init__(self):
        session = botocore.session.get_session()
        self._client = session.create_client('cloudfront')

    def distributionIds(self):
        """
        Fetch the set of CloudFront distribution identifiers.

        :return: a set containing known distribution identifiers.
        """
        response = self._client.list_distributions()
        return {distribution['Id'] for distribution in response['DistributionList']['Items']}

    def invalidate(self, distributionId):
        response = self._client.create_invalidation(DistributionId=distributionId,
                                                    InvalidationBatch=
            {
                "Paths": {
                    "Items": [
                        "*"
                    ],
                    "Quantity": 1
                },
                "CallerReference": str(uuid.uuid4())
            })
        return Invalidation(self._client,distributionId, response['Invalidation']['Id'])

def main(location=os.path.curdir, distributionId=None):
    cf = CloudFront()
    distributionIds = cf.distributionIds()
    if distributionId is None:
        if len(distributionIds) == 1:
            distributionId = iter(distributionIds).next()
        else:
            print "Multiple distributions found. Please specify which one:", ", ".join(distributionIds)
            return
    elif distributionId not in distributionIds:
        print "Unknown distribution identifier:", distributionId
        print "Known distribution identifiers:", ", ".join(distributionIds)
        return

    print "Invalidating distribution:", distributionId
    invalidation = cf.invalidate(distributionId)
    print "Waiting for invalidation %s to complete. (This can take quite some time.)" % invalidation.id
    invalidation.wait()

if __name__ == '__main__':
    import sys
    main(*sys.argv[1:])

# End.
